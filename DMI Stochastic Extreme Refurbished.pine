// @version=5
// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © andre_007
//
//  █████  ███    ██ ██████  ██████  ███████          ██████   ██████  ███████ 
// ██   ██ ████   ██ ██   ██ ██   ██ ██              ██  ████ ██  ████      ██ 
// ███████ ██ ██  ██ ██   ██ ██████  █████           ██ ██ ██ ██ ██ ██     ██  
// ██   ██ ██  ██ ██ ██   ██ ██   ██ ██              ████  ██ ████  ██    ██   
// ██   ██ ██   ████ ██████  ██   ██ ███████ ███████  ██████   ██████     ██   
// THANKS AND CREDITS
// - Barbara Star (original creator)
// - ucsgears (arrow logic)

indicator(title="DMI Stochastic Extreme Refurbished", shorttitle="DMI Stoch Extreme", timeframe="", timeframe_gaps=true, precision=0, format=format.price)

// ------------------------- Constants {
var string SMA              = 'Simple Moving Average'
var string EMA              = 'Exponential Moving Average'
var string REMA             = 'Regularized Exponential Moving Average'
var string HMA              = 'Hull Moving Average'
var string ALMA             = 'Arnaud Legoux Moving Average'
var string WMA              = 'Weighted Moving Average'
var string LSQ              = 'Least Squares Moving Average (Linear Regression)'
var string VWMA             = 'Volume Weighted Moving Average'
var string SMMA             = 'Smoothed Moving Average'
var string MEDIAN           = 'Median'
var string VWAP             = 'VWAP'
var color TRANSPARENT       = color.new(color.white, 100)
var color COLOR_UP          = color.new(#1aa814, 0)
var color COLOR_DOWN        = color.new(#ff1000, 0)
var color COLOR_UP_MKR      = color.new(color.green, 0)
var color COLOR_DOWN_MKR    = color.new(color.red, 0)
// ------------------------- }

// ------------------------- Inputs {
// -->
var string DMI_HISTO = 'DMI (Area or Histogram)'

var lenDIslow = input.int(10, minval=1, title="DI Length", group=DMI_HISTO, inline='10')
var DIsmoothSlow = input.bool(true, title='Smooth DI?', group=DMI_HISTO, inline='10')

var lenDIsmoothSlow = input.int(3, minval=1, title="DI Smooth", group=DMI_HISTO, inline='11')
var string typeDISmoothSlow = input.string(defval=SMA, title='Type of Smooth',
  options=[SMA, EMA, REMA, HMA, ALMA, WMA, LSQ, VWMA, SMMA, MEDIAN, VWAP],
  inline='11', group=DMI_HISTO)
  
var col_grow_above_slow = input(color.new(#0000FF, 60), "Above Grow", inline="15", group=DMI_HISTO)
var col_fall_above_slow = input(color.new(#2962ff, 60), "Fall", inline="15", group=DMI_HISTO)
var col_grow_below_slow = input(color.new(#c2185b, 60), "Below Grow", inline="16", group=DMI_HISTO)
var col_fall_below_slow = input(color.new(#670438, 60), "Fall", inline="16", group=DMI_HISTO)

// -->
var string DMI_STOCH = 'DMI (Stochastic Extreme)'
var lenDI = input.int(10, minval=1, title="DI Length", group=DMI_STOCH, inline='40')
var DIsmooth = input.bool(false, title='Smooth DI?', group=DMI_STOCH, inline='40')

var lenDIsmooth = input.int(3, minval=1, title="DI Smooth", group=DMI_STOCH, inline='41')
var string typeDISmooth = input.string(defval=SMA, title='Type of Smooth',
  options=[SMA, EMA, REMA, HMA, ALMA, WMA, LSQ, VWMA, SMMA, MEDIAN, VWAP],
  inline='41', group=DMI_STOCH)

var col_grow_above = input(#0039ff, "Above Grow", inline="42", group=DMI_STOCH)
var col_fall_above = input(#5b9cf6, "Fall", inline="42", group=DMI_STOCH)
var col_grow_below = input(#ec407a, "Below Grow", inline="43", group=DMI_STOCH)
var col_fall_below = input(#880e4f, "Fall", inline="43", group=DMI_STOCH)

var stochHiLoLen = input.int(3, minval=1, title="Stochastic High-Low Length", group=DMI_STOCH, inline='45')
var stochSumlen = input.int(3, minval=1, title="Stochastic Sum Length", group=DMI_STOCH, inline='46')
var stochSiglen = input.int(3, minval=1, title="Stochastic Signal Length (Moving Average)", group=DMI_STOCH, inline='47')
var string typeSmoothStoch = input.string(defval=ALMA, title='Type of Moving Average',
  options=[SMA, EMA, REMA, HMA, ALMA, WMA, LSQ, VWMA, SMMA, MEDIAN, VWAP],
  inline='48', group=DMI_STOCH)
  
var string themeStoch_1 = input.string(defval='User', title='Theme for Stoch Oscilator',
  options=['User', 'Gradient', 'Spectrum Blue-Green-Red', 'Monokai'], inline='60', group='Theme')
    
var color colorUpStoch_1 = input.color(color.new(color.blue, 0), title='Bull', group='Theme', inline='61')
var color colorDownStoch_1 = input.color(color.new(COLOR_DOWN, 0), title='Bear', group='Theme', inline='61')
var int opacityStoch_1 = input.int(0, minval=0, maxval=100, inline='61', title='Opacity', group='Theme')

var string themeStoch_2 = input.string(defval='User', title='Theme for Stoch Signal',
  options=['User', 'Gradient', 'Spectrum Blue-Green-Red', 'Monokai'], inline='62', group='Theme')
    
var color colorUpStoch_2 = input.color(color.new(color.blue, 0), title='Bull', group='Theme', inline='63')
var color colorDownStoch_2 = input.color(color.new(COLOR_DOWN, 0), title='Bear', group='Theme', inline='63')
var int opacityStoch_2 = input.int(0, minval=0, maxval=100, inline='63', title='Opacity', group='Theme')

var int opacityStoch_3 = input.int(100, minval=0, maxval=100, inline='63', title='Opacity for fill', group='Theme')

var string LINES = 'Lines'
var topAlertLine = input.int(90, title='Top Alert Line', inline='70', group=LINES)
var bottomAlertLine = input.int(10, title='Bottom Alert Line', inline='70', group=LINES)

var topAlertCross = input.int(90, title='Fill overbought', inline='71', group=LINES)
var bottomAlertCross = input.int(10, title='Fill oversold', inline='71', group=LINES)

var color colorOverBought = input.color(color.new(COLOR_DOWN, 90), title='Overbought', group=LINES, inline='75')
var color colorOverSold = input.color(color.new(#0005ee, 80), title='Oversold', group=LINES, inline='75')

var string CROSS = 'Cross Alerts'
var color colorAlertBull = input.color(color.new(#90bff9, 0), title='Bear', group=CROSS, inline='80')
var color colorAlertBear = input.color(color.new(#faa1a4, 0), title='Bear', group=CROSS, inline='80')
// ------------------------- }  
  
// ------------------------- Moving Average {
// The Regularized Exponential Moving Average or Regularized EMA is a trading indicator introduced by Chris Satchwell in July 2003 version of Stock & Commodities magazine.
// This technical analysis indicator was designed to be smoother and with less lag that the traditional exponential moving average. 
// The indicator gets the EMA period and the Lambda value (A factor that controls the "regularization" amount). 
// When the Lambda value is set to zero, the Regularized Exponential Moving Average becomes the standard EMA.
// The first argument of the Regularized EMA function gets the price series that will be smoothed. 
// Usually, the close price is used but you can also use and calculate the Regularized EMA of any other price series or technical indicators.
// lambda = input(title="Regularization Constant", type=float, minval=0, defval=0.5)
rema(float src, simple int len, simple float lambda=0.5) =>
    alpha = 2 / (len + 1)
    ma = 0.0
    ma := (nz(ma[1]) + alpha * (src - nz(ma[1])) + lambda * (2 * nz(ma[1]) - nz(ma[2]))) / (lambda + 1)
    
// @function Smoothed Moving Average.
smma(float src = close, simple int len) =>
    smma = float(0.0)
    smaval = ta.sma(ta.sma(src, len), len)
    smma := na(smma[1]) ? smaval : (smma[1] * (len - 1) + src) / len    

fCalcMa(series float src, simple string type, simple int len) =>
    maRet = switch type
        SMA => ta.sma(src, len)
        EMA => ta.ema(src, len)
        REMA => rema(src, len)
        HMA => ta.hma(src, len)
        ALMA => ta.alma(src, len, 0.85, 6, false)
        WMA => ta.wma(src, len)
        LSQ => ta.linreg(src, len, 0)
        SMMA => smma(src, len)    
        VWMA => ta.vwma(src, len)
        MEDIAN => ta.median(src, len)
        VWAP => ta.vwap(src)
// ------------------------- }

// -------------------------  DI - Directional Moviment Index {
fCalcDI(_lenDI, _DIsmooth, _typeDISmooth, _lenDIsmooth, _col_grow_above, _col_fall_above, _col_grow_below, _col_fall_below) =>
    up = ta.change(high)
    down = -ta.change(low)
    
    plusDM = na(up) ? na : (up > down and up > 0 ? up : 0)
    minusDM = na(down) ? na : (down > up and down > 0 ? down : 0)
    
    trur = ta.rma(ta.tr, _lenDI)
    plus = fixnan(100 * ta.rma(plusDM, _lenDI) / trur)
    minus = fixnan(100 * ta.rma(minusDM, _lenDI) / trur)
    
    diff = plus - minus
    diff := _DIsmooth ? fCalcMa(diff, _typeDISmooth, _lenDIsmooth) : diff
    
    diffColor = (diff>=0 ? (diff[1] < diff ? _col_grow_above : _col_fall_above) : (diff[1] < diff ? _col_grow_below : _col_fall_below))
    
    [diff, diffColor]
// ------------------------- }

// ------------------------- Colors {
fSetColorBGR(valueX) =>
    switch
        (valueX <= 10) or (valueX[1] <= 10) => color.new(#0000FF, 0)
        (valueX > 10 and valueX <= 30) or (valueX[1] > 10 and valueX[1] <= 30)  => color.new(#01b5cc, 0)
        (valueX > 30 and valueX <= 50) or (valueX[1] > 30 and valueX[1] <= 50)  => color.new(#3af13c, 0)
        (valueX > 50 and valueX <= 70) or (valueX[1] > 50 and valueX[1] <= 70)  => color.new(#ffeb3b, 0)
        (valueX > 70 and valueX <= 90) or (valueX[1] > 70 and valueX[1] <= 90)  => color.new(#ff6d00, 0)
        (valueX > 90) or (valueX[1] > 90)  => color.new(#ff0000, 0)
      
fSetColorMonokai(valueX) =>
    switch
        (valueX <= 10) or (valueX[1] <= 10) => color.new(#a6e22e, 0)
        (valueX > 10 and valueX <= 30) or (valueX[1] > 10 and valueX[1] <= 30)  => color.new(#00fff0, 0)
        (valueX > 30 and valueX <= 50) or (valueX[1] > 30 and valueX[1] <= 50)  => color.new(#8080ff, 0)
        (valueX > 50 and valueX <= 70) or (valueX[1] > 50 and valueX[1] <= 70)  => color.new(#e0e0e0, 0)
        (valueX > 70 and valueX <= 90) or (valueX[1] > 70 and valueX[1] <= 90)  => color.new(#f3ff6c, 0)
        (valueX > 90) or (valueX[1] > 90)  => color.new(#f54081, 0)
    
getColor(_maX, _maY, _colorUp, _colorDown, _theme, _opacity) =>
    colorX = switch _theme
        'User' => color.new( (_maX >= _maY) or _maX >= _maX[1] ? _colorUp : _colorDown, _opacity )
        'Gradient' => color.from_gradient( _maX > _maX[1] ? _maX : _maX[1], 0, 100, color.new(_colorDown, _opacity), color.new(_colorUp, _opacity) )
        'Spectrum Blue-Green-Red' => color.new( fSetColorBGR(_maY), _opacity)
        'Monokai' => color.new( fSetColorMonokai(_maY), _opacity )    
// ------------------------- }
  
// ------------------------- Calcs {
// DMI for Stochastic
[diff, diffColor] = fCalcDI(lenDI, DIsmooth, typeDISmooth, lenDIsmooth, col_grow_above, col_fall_above, col_grow_below, col_fall_below)
// DMI for Histogram
[diffSlow, diffColorSlow] = fCalcDI(lenDIslow, DIsmoothSlow, typeDISmoothSlow, lenDIsmoothSlow, col_grow_above_slow, col_fall_above_slow, col_grow_below_slow, col_fall_below_slow)

hi = ta.highest(diff, stochHiLoLen)
lo = ta.lowest(diff, stochHiLoLen)
stoch = math.sum((diff-lo), stochSumlen) / math.sum((hi-lo), stochSumlen) * 100
avgStoch = fCalcMa(stoch, typeSmoothStoch, stochSiglen)
// ------------------------- }

// ------------------------- Plots {
// --> Lines
top = hline(100, "Top", color=color.red, linestyle=hline.style_solid, display=display.none)
bottom = hline(0, "Bottom", color=color.blue, linestyle=hline.style_solid, display=display.none)

lineAlertTop = hline(topAlertLine, "Overbought", color=color.new(color.red, 0), linestyle=hline.style_solid, display=display.all)
lineAlertCenter = hline(50, "Center", color=color.new(color.gray, 0), linestyle=hline.style_dotted, display=display.all)
lineAlertBottom = hline(bottomAlertLine, "Oversold", color=color.new(color.blue, 0), linestyle=hline.style_solid, display=display.all)

// DI
plot(diffSlow, title="DI Histogram", style=plot.style_columns, color=diffColorSlow)
plot(diffSlow, title="DI Lines", style=plot.style_line, color=color.new(diffColorSlow, 0), linewidth=2, display=display.all)

plot(diff, title="DI for Stoch", style=plot.style_area, color=diffColor, display=display.none)
plot(diff, title="DI Lines for Stoch", style=plot.style_line, color=diffColor, linewidth=2, display=display.none)

// Stochchastic
colorStoch=getColor(stoch, avgStoch, colorUpStoch_1, colorDownStoch_1, themeStoch_1, opacityStoch_1)
colorMaStoch=getColor(stoch, avgStoch, colorUpStoch_2, colorDownStoch_2, themeStoch_2, opacityStoch_2)

p_stochDmi = plot(stoch, color=colorStoch, title='Stochastic Oscilator', linewidth=2, style=plot.style_line)
p_maStoch = plot(avgStoch, color=colorMaStoch, title='Stochastic Signal', linewidth=2, style=plot.style_line, display=display.none)
fill(p_stochDmi, p_maStoch, color=getColor(stoch, avgStoch, colorUpStoch_2, colorDownStoch_2, themeStoch_2, opacityStoch_3), title='Fill beetween Stoch and Signal', display=display.all)

extremeBear = (stoch <= bottomAlertCross ? true : false)
extremeBull = (stoch >= topAlertCross ? true : false)

fill(top, bottom, extremeBear ? colorOverSold : na, 'Fill background on bear signal', display=display.all)
fill(top, bottom, extremeBull ? colorOverBought : na, 'Fill background on bear signal', display=display.all)

crossUp = stoch[1] < bottomAlertCross and stoch > bottomAlertCross ? true : false
crossDown = stoch[1] > topAlertCross and stoch < topAlertCross ? true : false

plotchar(crossUp, title="Crossing Up", char='↑', location=location.bottom, color=colorAlertBull, size=size.small, offset=0)
plotchar(crossDown, title="Crossing Down",char='↓', location=location.top, color=colorAlertBear, size=size.small, offset=0)
// ------------------------- }